/**

\mainpage The DESERT Underwater Libraries

\image html http://nautilus.dei.unipd.it/images/DESERT.png
\image latex ./docs/DESERT.eps

@version 3.0

@authors <b> Project supervisor: </b> Paolo Casari - casarip@dei.unipd.it

@authors <b> Members: </b> Federico Favaro - fedefava86@gmail.com, Federico Guerra - federico@guerra-tlc.com, Filippo Campagnaro - campagn1@dei.unipd.it, Roberto Francescon - francescon.roberto@gmail.com

@authors <b> Other contributors and former members: </b> Riccardo Masiero, Saiful Azad, Ivano Calabrese, Cristiano Tapparello, Loris Brolo, \link Giovanni Giovanni Toso

<br>

\section IntroNotes Introductory notes

\subsection BriefHist Brief history
DESERT Underwater (or briefly DESERT) <b>[1]</b> is a framework to DEsign, SimulatE and Realize Testbeds for Underwater network protocols. The support DESERT offers to these activities comes in two flavors: support to simulations and support to real-life experimentation.

With DESERT, we distribute several network protocols for underwater networking, some of which are the result of our own development, whereas some represent our own understanding of protocols found in the literature.
Among the components of DESERT, some libraries and tools help speed up the transition from simulations to sea trials. The latter is achieved by integrating the commands required to communicate with real modems into specific interface modules. In turn, this allows the user to run protocols in real life by re-using the same protocol code already written for simulations.

DESERT is based on ns2 <b>[2]</b> and NS-MIRACLE <b>[3]</b>. In particular, DESERT follows the modular approach of the latter. Other than network protocols, DESERT provides additional libraries and tools to help simulate underwater networks realistically. These tools include mobility models that reproduce realistic mobility patterns, energy consumption models, and channel models. The most advanced model available is provided via a close interaction between DESERT and WOSS <b>[4]</b>.

DESERT has been successfully tested with several underwater modems (e.g., EvoLogics S2C and White Line modems <b>[5]</b>, WHOI microModems <b>[6] [7]</b>, Develogic modems <b>[8]</b>) for the real-life implementation of underwater protocols, both in static and in mobile networks.
DESERT has also been successfully tested on low-power embedded systems such as the Gumstix, Pandaboard, IGEPv2 and NetDCU platforms.
Altogether, the many proof-of-concept implementations and complex tests carried out with DESERT so far make DESERT an effective solution for realizing underwater networking experiments by reusing the same protocol code already written for simulations.

DESERT Underwater has been adopted in several real life <A HREF="http://desert-underwater.dei.unipd.it/index.php/field-experiments/">sea-trials</A>. You can find more on brand new <A HREF="http://desert-underwater.dei.unipd.it">website</A> of the project


\subsection NewVer DESERT Release

A considerable amount of work has been done in order to make the installation of the software automatic via a modular installation script, that includes a fully-guided wizard mode.
At the same time, the installation is organized into separate modules. An experienced users can easily extend the process to accommodate specific requirements, new functionalities, or even to make DESERT part of larger projects.
As a further help for users wishing to experiment with real hardware using DESERT, we also provide different installer modules, suitable for different compact/embedded hardware platforms, starting from the <A HREF="https://www.gumstix.com/">Gumstix</A> and the <A HREF="http://www.raspberrypi.org/">Raspberry Pi</A>. This set will be extended in the future.
In order to use DESERT more and more in real environments, uwApplication is provided. This module permits to transmit real payloads among nodes with tunable dimension. Moreover, real data can be transmitted to uwApplication trough a TCP or UDP socket at a given port. Using this feature, you can implement a very simple "underwater chat," or connect a sensor or device that will transmit its data to uwApplication through a socket. uwApplication encapsulates the payload with control headers and delivers packet to the lower layers.
Finally, the functionalities offered by DESERT have been extended with a control framework that provides a set of primitives to remotely control the hardware modems, and thus the network operations.
All these features are released constantly on our <A HREF="https://github.com/uwsignet/DESERT_Underwater">GitHub</A> repository

<br>

\section refs References

<b>[1]</b> R. Masiero, P. Casari, M. Zorzi, "The NAUTILUS project: Physical Parameters, Architectures and Network Scenarios," <i>Proc. MTS/IEEE OCEANS</i>, Kona, HI, 2011.

<b>[2]</b> The Network Simulator - ns2. http://nsnam.isi.edu/nsnam/index.php/Main_Page

<b>[3]</b> N. Baldo, M. Miozzo, F. Guerra, M. Rossi, and M. Zorzi, "Miracle: the multi-interface cross-layer extension of ns2," EURASIP J. of Wireless Commun. and Networking, 2010. [Online]. Available: http://www.hindawi.com/journals/wcn/aip.761792.html

<b>[4]</b> WOSS - World Ocean Simulation System. http://telecom.dei.unipd.it/ns/woss/

<b>[5]</b> EvoLogics GmbH web site. http://www.evologics.de/

<b>[6]</b> Woods Hole Oceanographic Institution web site. http://www.whoi.edu/

<b>[7]</b> The Goby Underwater Autonomy Project web site. http://gobysoft.com/

<b>[8]</b> Develogic Subsea Systems. http://www.develogic.de/

<b>[9]</b> W. Liang, H. Yu, L. Liu, B. Li and C. Che, "Information-Carrying Based Routing Protocol for Underwater Acoustic Sensor Network," <i>Proc. ICMA</i>, Takamatsu, Japan, Aug. 2007.

<b>[10]</b> N. Abramson, "Development of the ALOHANET," <i>IEEE Transactions on Information Theory</i>, vol. 31, num. 2, pp. 119-123, 1985.

<b>[11]</b> X. Guo, M. R. Frater and M. J. Ryan, "A propagation-delay-tolerant collision avoidance protocol for underwater acoustic sensor networks," <i>Proc. OES/IEEE OCEANS</i>, Singapore, May 2006.

<b>[12]</b> B. Peleato and M. Stojanovic, "Distance aware collision avoidance protocol for ad-hoc underwater acoustic sensor networks," <i>IEEE Communications Letters</i>, vol. 11, num. 12, pp. 1025-1027, 2007.

<b>[13]</b> F. Favaro, P. Casari, F. Guerra, M. Zorzi, "Data Upload from a Static Underwater Network to an AUV: Polling or Random Access?", <i>Proc. MTS/IEEE OCEANS</i>, Yeosu, South Korea, May 2012.

<b>[14]</b> A. Syed, W. Ye and J. Heidemann, "T-Lohi: A new class of MAC protocols for underwater acoustic sensor networks," <i>IEEE INFOCOM</i>, Phoenix, AZ, Apr. 2008.

<b>[15]</b> S. Azad, P. Casari, M. Zorzi, The Underwater Selective Repeat Error Control Protocol for Multiuser Acoustic Networks: Design and Parameter Optimization," <i>IEEE Transactions on Wireless Communications</i>, vol. 12, no. 10, pp. 4866-4877, Oct. 2013.

<b>[16]</b> F. Favaro, L. Brolo, G. Toso, P. Casari, M. Zorzi, "A Study on Data Retrieval Strategies in Underwater Acoustic Networks", <i>Proc. MTS/IEEE OCEANS</i>, San Diego, CA, Sep. 2013.

<b>[17]</b> C. Tapparello, P. Casari, G. Toso, I. Calabrese, R. Otnes, P. van Walree, M. Goetz, I. Nissen, M. Zorzi, "Performance Evaluation of Forwarding Protocols for the RACUN Network," Proc. of ACM WUWNet, Kaohsiung, Taiwan, Nov. 2013.

<b>[18]</b> B. Liang and Z. Haas, "Predictive distance-based mobility management for PCS networks," <i>Proc. IEEE INFOCOM</i>, New York, NY, Mar. 1999.

<b>[19]</b> F. Campagnaro, R. Francescon, F. Guerra, F. Favaro, P. Casari, R. Diamant, M. Zorzi, "The DESERT underwater framework v2: Improved capabilities and extension tools," <i>Proc. IEEE UCOMMS</i>, Lerici, Italy, Oct. 2016.



  */

/** \page INSTALL1 Installation Guidelines

\section requirements Installation requirements: Ubuntu

Before installing the DESERT framework, please check that your host device has the following packages installed:

<SMALL>
<BLOCKQUOTE>
- build-essential
- autoconf
- automake
- libxmu-dev
- libx11-dev
- libxmu-dev
- libxmu-headers
- libxt-dev
- libtool
- gfortran
- bison
- flex
</BLOCKQUOTE>
</SMALL>

If you are using a Debian-based Linux distribution, you can type this command in a terminal

<small>

    sudo apt-get install build-essential autoconf automake libxmu-dev libx11-dev libxmu-dev libxmu-headers libxt-dev libtool gfortran bison flex

</small>

in order to install all dependencies above.

\section fed-requirements Installation requirements: Fedora

DESERT Underwater was successfully installed on Fedora 23 and following releases. Before installing the DESERT framework in Fedora, please check that your host device has the following packages installed:

<SMALL>
<BLOCKQUOTE>
- C Development Tools and Libraries
- gcc-gfortran
- libXmu-devel
- libX11-devel
- patch
- patchutils
</BLOCKQUOTE>
</SMALL>

Please note that main C develoment tools are installed by installing the package group "C Development Tools and Libraries". To install all the software requirements you can run the following commands in a terminal:

<small>

    dnf groupinstall "C Development Tools and Libraries"

</small>

<small>

    dnf install gcc-fortran libXmu-devel libX11-devel patch patchutils

</small>

\section install Installation procedures

To install DESERT Underwater, you can choose between two different approaches:

- <i>wizard</i> mode
- <i>command-line</i> mode

The wizard mode implements an interactive installation procedure. As such, it is easier and more user-friendly than the command-line mode.
The command-line mode is recommended for more experienced users.
Note that, after completing an installation with the wizard, you will be also provided a command-line string. You can note down this string and enter it at the command prompt in order to reproduce exactly the same installation steps (with the same options, the same packages installed, etc.). When you become more comfortable with DESERT's installation options, you can also modify the automatically generated command-line string to reflect your desired configuration.

To launch the installation in wizard mode, once you have downloaded and unpacked the framework, you have to cd into the framework folder by using:

<small>

    cd DESERT_Underwater/DESERT_Framework

</small>

set the executable flag of the installer:

<small>

    chmod +x ./install.sh

</small>

and run the installer:

<small>

    ./install.sh --wizard

</small>

The procedure will guide you through 6 steps:

- setting of the installation-target
- setting of the installation mode
- setting of the destination folder
- choice whether or not to install the WOSS libraries
- setting of possible custom parameters (OPTIONAL)
- selection of the addons to be installed (OPTIONAL)

To employ the command-line mode, you need to manually specify all installation settings through the corresponding command-line options. This mode makes it possible to embed the DESERT Underwater installation tool into other custom scripts. For example, if you need to integrate the installation procedure into some more general "installation project", with the "command-line" mode you will find the command-line mode useful.

Here is a list of all options currently available:

<small>

    --help
        Print the help and exit

    --wizard
        Start the installation procedure in wizard mode

    --with-woss
        Only for command-line. Enable the installation of the WOSS libraries

    --without-woss
        Only for command-line. Explicitly disable the installation of the WOSS libraries

    --target <installation-target-name>
        Only for command-line. This options sets the compilation target.
        From the point of view of the installation tool, passing the target option
        is equivalent to choosing the specific installation script to be used after
        the preliminary settings. The installation scripts are located in
        .../DESERT_Underwater/DESERT_Framework/Installation/.
        If you create a custom installation script, you must put it in this folder.
        Targets available:
            - PC
            - Gumstix-yocto-poky
            - Raspberry-Pi-yocto-poky
            - Udoo

    --inst_mode <installation-mode>
        Only for command-line. This option sets whether to install in release mode or
        in development mode. In release mode, after the compilation/cross-compilation
        has been completed, the destination folder will contain only the files strictly
        required to run the DESERT libraries (namely, the bin/ and lib/ folders).
        Conversely, the development mode keeps all source files and build sub-products.
        Note that the source folders are part of an active working copy, which you can
        directly use to develop modules, re-compile code without restarting the
        installation process from scratch, and commit updates to the source code.
        Installation-modes available:
           - development
           - release

    --dest_folder <destination-folder-path>
        Only for command-line. This option sets where the installation procedure will
        put all files generated during the compilation process.

    --addons <list-of-the-DESERT-addons>
        Only for command-line. This option specifies which addons to Desert Underwater
        should be installed. The available addons are usually found in
        .../DESERT_Underwater/DESERT_Addons/
        The <list-of-the-DESERT-addons> parameter is composed by the names of any addons
        separated by a white space and enclosed in quotes, e.g.,
        "ADDON1 ADDON2 ADDON3"

    --custom_par <list-of-parameters>
        Only for command-line. This option provides a useful means of passing a variable
        list of parameters to a custom installation script. The list-of-parameters is
        composed by all parameters, separated by a white space and enclosed in quotes,
        e.g.,
        "param1 param2 param3"

</small>

If you encounter any problem while building this library, we set up a desert-users mailing list
that you can refer to. Please point to
https://mail.dei.unipd.it/mailman/listinfo/desert-usergroup.

<br>

\section todoafter After the installation has been completed

When the installation of DESERT Underwater has been successfully completed, you need to update your environment variables by exporting the paths to the bin/ and lib/ folders created in the path specified during the installation. This is required in order to correctly use DESERT and its dependencies (ns, ns-miracle, etc.).
This operation is made simpler via the <i>environment</i> file generated at the end of the installation session in the <destination-folder-path> only for the "development" installation-mode. So, by running the following command:

<small>

    source <destination-folder-path>/environment

</small>

you will be able to call <i>ns</i> and all compiled libraries directly in the shell where you ran the above command. You may want to check the <i>environment</i> script to see what it exactly does.
<br>
With the "release" installation-mode, instead, you can set the environment via the following command:

<small>

    cd <destination-folder-path> && ./make_environment.sh

</small>

before updating your environment variables. The "make_environment.sh" script is particularly useful after the DESERT framework has been cross-compiled and copied into the target device: in this case, the script dynamically generates the environment file in agreement with the destination folder path within the target device.
<br>

*/

/** \page HowTo How to add a new custom installer

First of all, enter the installation folder:

<small>

    cd .../DESERT_Underwater/DESERT_Framework/Installation/

<BLOCKQUOTE>
NOTE: When you see a pathname preceded by three dots, this refers to a well-known but unspecified top-level directory. The top-level directory is context-dependent, but almost universally refers to top-level DESERT source directory. For example, <tt>.../DESERT_Underwater/DESERT_Framework/Installer/installDESERT_PC.sh</tt> refers to the <tt>installDESERT_PC.sh</tt> file located in the architecture branch of a DESERT framework source tree.
The actual path might be something like <tt>/home/foo/DESERT_Underwater/DESERT_Framework/Installer/installDESERT_PC.sh</tt>.
</BLOCKQUOTE>
</small>

At this point, create a new script. We suggest to copy an existing installation script (e.g. <tt>installDESERT_PC.sh</tt>):

<small>

    cp installDESERT_PC.sh installDESERT_<your-custom-installation-target>.sh

</small>

Please note the <tt><your-custom-installation-target></tt> label: this will be the same parameter you will pas later as an option to the installation script when indicating which installation-target to choose. We remark that these steps are very easy but also very important, since the only way to call the correct installation script for <tt><your-custom-installation-target></tt> is that the script <tt>installDESERT_<your-custom-installation-target>.sh</tt> exists in the folder <tt>.../DESERT_Underwater/DESERT_Framework/Installation/</tt>

Let us now have a deeper look at the script. We focus first on the main block:

<small>

    main() {
        #******************************************************************************
        # MAIN
        #     e.g handle_package host/target <pkt-name>
        #     e.g addon_installation_list host/target <addon-list>

        ## only for the cross-compilation session
        export CROSS_ENV_DIR=""
        export CROSS_ENV_FILE=""
        #*

        handle_package host ZLIB
        handle_package host TCL
        export PATH=${BUILD_HOST}/bin:$PATH
        export LD_LIBRARY_PATH=${BUILD_HOST}/lib
        handle_package host OTCL
        handle_package host TCLCL
        handle_package host NS
        handle_package host NSMIRACLE
        handle_package host DESERT
        if [ ${WITHWOSS} -eq 1 ]; then
            handle_package host NETCDF
            handle_package host NETCDFCXX
            handle_package host BELLHOP
            handle_package host WOSS
        fi
        if [ ! -z "${ADDONS}" ]; then
            addon_installation_list host "${ADDONS}"
        fi
        #******************************************************************************
    }

</small>

Notice the "host" directive. This tells the installation script to compile the
libraries for the current host. If you need to modify this script to cross-compile
for a different target, substitute all lines with the following ones:

<small>

    main() {
        #******************************************************************************
        # MAIN
        #     e.g handle_package host/target <pkt-name>
        #     e.g addon_installation_list host/target <addon-list>

        ## only for the cross-compilation session
        export CROSS_ENV_DIR="<YOUR/ENVIRONMENT/FOLDER/PATH>"
        export CROSS_ENV_FILE="${CROSS_ENV_DIR}/environment"
        #*

        handle_package host/target ZLIB
        handle_package host/target TCL
        export PATH="${BUILD_HOST}/bin:$PATH"
        export LD_LIBRARY_PATH="${BUILD_HOST}/lib"
        handle_package host/target OTCL
        handle_package host/target TCLCL
        handle_package target NS
        handle_package target NSMIRACLE
        handle_package target DESERT
        if [ ${WITHWOSS} -eq 1 ]; then
            #handle_package target NETCDF
            #handle_package target NETCDFCXX
            #handle_package target BELLHOP
            #handle_package target WOSS
            warn_L1 "The WOSS libreries wont be installed!"
        fi
        if [ ! -z "${ADDONS}" ]; then
            addon_installation_list target "${ADDONS}"
        fi
        #******************************************************************************
    }

</small>

With these changes we instructed the installer to compile some modules only for the
host ("host" directive), some for both the host and the target ("host/target"
directive) and the remaining ones only for the target ("target" directive).
This step is crucial, because some libraries must be compiled for the host,
in order to correctly cross-compile DESERT and its addons for
<tt><your-custom-installation-target></tt>.

<small>

    WARNING: be careful NOT TO CONFUSE the directive "target" with "<tt><your-custom-installation-target></tt>".
             The former is just a directive to the <tt>handle_package</tt> function of the installation script.

</small>

We remark that you need the <b>TOOLCHAIN</b> of <tt><your-custom-installation-target></tt> in order to
correctly complete the installation.

As an example, we prepared two installation scripts that cross-compile DESERT Underwater and all its dependencies for two different embedded system, namely the Gumstix Overo® FireSTORM and the Raspberry Pi® platforms. The toolchains of these devices are not available for download from our repository, because it is safer to follow the instructions listed in the \ref OurDevices section to obtain these toolchains.

*/

/** \page OurDevices Embedded Systems

\section gumstix Gumstix Overo
<b> Gumstix Overo® FireSTORM COM </b><SMALL>[GUM3703f]</SMALL>

See also: https://store.gumstix.com/coms/overo-coms.html

\image html https://d3iwea566ns1n1.cloudfront.net/images/product/GUM3703F.overview.jpg


On the Gumstix Overo board, we installed a Yocto Project® image. We chose to use Yocto because it makes possible to create custom Linux distributions for embedded systems, including Gumstix-based systems. It is a collection of git repositories, known as layers, where each layer provides recipes to build software packages, as well as configuration information. For more details on the Yocto Project, we refer the interested user to https://www.yoctoproject.org/.

There exists a Yocto Project repository which is ready for installation on the Gumstix embedded boards at [GitHub](https://github.com/gumstix/Gumstix-YoctoProject-Repo).

We point the user to the following page for an excellent tutorial on how to build a Yocto distribution for the Gumstix Overo:

http://www.hackgnar.com/2015/03/building-yocto-linux-images-for-gumstix.html

and follow the installation steps described therein.
After the distro has been built, the next step is to prepare the file system to be copied on board the micro SD card that will be loaded on the Gumstix. The last steps in the previous page will guide the user towards this.

Be aware that there are some changes to be made with respect to the page, namely

- The file `uImage` does not exist anymore in the `../yocto/build/tmp/deploy/images/overo` folder and so, it does not need to be copied.

- The filesystem of the Yocto image is not in `yocto.tar.bz2` as pointed out by the tutorial bu, instead, is found at `gumstix-console-image-overo.tar.bz2`.

- Once the user has identified the micro SD device (i.e. `/dev/sdX`) the file system is normally mounted (on a Ubuntu machine) at `/media/<USERNAME>/<DEVICE_FOLDER>`.

After all files have been uploaded to the Gumstix's microSD card and your Gumstix system boots, the final step is to set the toolchain. You can do so as follows: <br>
- Generate the Yocto toolchain through:
<small>

    cd ../yocto/
    source poky/oe-init-build-env
    bitbake meta-ide-support

</small>

- Create an empty directory to hold the toolchain that was generated:
<small>

    sudo mkdir -p /opt/overo-yocto/
    cd /opt/overo-yocto/

</small>
- Now create a symbolic link to the gumstix toolchain in the folder above, and write the environment file:
<small>

    sudo ln -sf .../yocto/build/tmp/sysroots/x86_64-linux /opt/overo-yocto/sysroots-x86_64-linux
    sudo touch environment

</small>
- Open the `environment` file with a text editor and write the following lines:
<small>

    export PATH=/opt/overo/sysroots/x86_64-linux/usr/bin/arm-poky-linux-gnueabi:$PATH
    export SDKTARGETSYSROOT=/opt/overo/sysroots/overo
    export CC="arm-poky-linux-gnueabi-gcc  -march=armv7-a -mfloat-abi=hard -mfpu=neon -mtune=cortex-a8 --sysroot=$SDKTARGETSYSROOT"
    export CXX="arm-poky-linux-gnueabi-g++  -march=armv7-a -mfloat-abi=hard -mfpu=neon -mtune=cortex-a8 --sysroot=$SDKTARGETSYSROOT"
    export STRIP=arm-poky-linux-gnueabi-strip
    export AR=arm-poky-linux-gnueabi-ar

</small>

At this point it is possible to use the installation script.<br>
To do so, go inside <tt>.../DESERT_Underwater/DESERT_Framework/</tt><br>
and launch <tt>./install.sh [OPTIONS]</tt> <br>
See section \ref install for more information about the options.

<br>

\section raspberry Raspberry Pi
<b> Raspberry Pi® Model B</b>

See also: http://www.raspberrypi.org/

\image html http://nautilus.dei.unipd.it/images/raspberry-pi-model-b.jpg

The Raspberry Pi is an ultra low cost embedded system that supports GNU/Linux OSes and was conceived with the primary goal of teaching computer programming. Its price tag ($25-$35), and the wide availability of pre-compiled software, makes it a perfect embedded system to start with for getting your hands dirty. Three main versions have been developed up to now: Raspberry Pi 1, 2 and 3.

Also for the Raspberry Pi embedded system we used Yocto to create a Linux-based distro with the required toolchain. The Yocto project has an official Raspberry Pi image (BSP layer) in the main Yocto repository and the versions 1, 2 and 3 are supported. The first step it to point the user to it:

https://git.yoctoproject.org/cgit/cgit.cgi/meta-raspberrypi/

The procedure to create an image for the Raspberry Pi is easier than the one for the Gumstix. The steps described builds a Raspberry Pi version 1 image but the procedure can be easily adapted to work with version 2 or 3 of the board.

- create a folder, named `yocto`, in your system and cd in it
<small>

    mkdir yocto
    cd yocto

</small>

- clone the Yocto repository (the branch `krogoth`)
<small>

    git clone -b krogoth git://git.yoctoproject.org/poky.git

</small>

- cd in the folder created by the git command
<small>

    cd poky

</small>

- clone the meta layer of the brach `krogoth` for the Raspberry Pi
<small>

    git clone -b krogoth git://git.yoctoproject.org/meta-raspberrypi

</small>

- set the terminal to use bitbake (you will be in a folder called `build`)
<small>

    source oe-init-build-env

</small>

- there are few configurations to make: first edit `conf/local.conf` to add these lines (changing raspberry to raspberrypi2 or raspberrypi3 if you are building for these devices)
<small>

    MACHINE = "raspberrypi"
    GPU_MEM = "16"

    ...

    EXTRA_IMAGE_FEATURES ?= "debug-tweaks tools-sdk"

</small>

- second edit `conf/bblayers.conf` to add the `meta-raspberrypi` bblayer
<small>

    BBLAYERS ?= "
    <PATH_TO_YOUR_YOCTO_FOLDER>/yocto/poky/meta \
    <PATH_TO_YOUR_YOCTO_FOLDER>/yocto/poky/meta-poky \
    <PATH_TO_YOUR_YOCTO_FOLDER>/yocto/poky/meta-yocto-bsp \
    <PATH_TO_YOUR_YOCTO_FOLDER>/yocto/poky/meta-raspberrypi \
    "

</small>

- start the creation of the image to be copied onto the SD card (this will take some time)
<small>

    bitbake -k rpi-basic-image

</small>

- while on this shell, let's build also the toolchain needed to cross-compile DESERT. To do it, run:
<small>

    bitbake meta-ide-support

</small>

- when the compilation will be over, insert an SD card (at least 4 GB) in your card reader and identify the device name by running `dmesg`
<small>

    dmesg
    ...
    [102430.343577]  sdX
    ...

</small>

- in order to copy the image on the SD card, run (specifying the device `sdX`)
<small>

    cd tmp/deploy/images/raspberrypi
    sudo dd if=rpi-basic-image-raspberrypi.rpi-sdimg of=/dev/sdX bs=1M

</small>

After `dd` finished with the copy, you have to expand the root partition on your SD to fit the entire sd card. You can do it by using `gparted` which is both powerful and easy to use. A good tutorial can be found here: https://www.ibm.com/developerworks/library/l-resizing-partitions-1/.

After all the files have been copied to the Raspberry Pi's SD card and your system boots up, the final step is to set the toolchain system variables, needed for the cross-compilation of DESERT. You can do so as follows:

- Create an empty directory to hold the environment file for the toolchain:
<small>

    sudo mkdir -p /opt/raspberry/
    cd /opt/raspberry/

</small>

- Now create a symbolic link to the raspberry-pi toolchain, and write the environment file:
<small>

    sudo ln -sf <PATH_TO_YOUR_YOCTO_FOLDER>/yocto/poky/build/tmp/sysroots  /opt/raspberry/sysroots
    sudo touch environment

</small>

- Open the `environment` file with a text editor and write the following lines:
<small>

    export PATH=/opt/raspberry/sysroots/x86_64-linux/usr/bin/arm-poky-linux-gnueabi:$PATH
    export SDKTARGETSYSROOT=/opt/raspberry/sysroots/raspberrypi
    export CC="arm-poky-linux-gnueabi-gcc  -march=armv6 -mfpu=vfp  -mfloat-abi=hard -mtune=arm1176jzf-s -mfpu=vfp --sysroot=$SDKTARGETSYSROOT"
    export CXX="arm-poky-linux-gnueabi-g++  -march=armv6 -mfpu=vfp  -mfloat-abi=hard -mtune=arm1176jzf-s -mfpu=vfp --sysroot=$SDKTARGETSYSROOT"
    export STRIP=arm-poky-linux-gnueabi-strip
    export AR=arm-poky-linux-gnueabi-ar

</small>

At this point it is possible to use the installation script. To do so, go inside <tt>.../DESERT_Underwater/DESERT_Framework/</tt> and launch <tt>./install.sh [OPTIONS]</tt>. See section \ref install for more information about the options.

Please note that the first time that you run the command bitbake, the system will require several hours to fetch all the recipes, paths, configures and compile them. Fortunately the next time the procedure will be much faster.

Yocto is a very good starting point to enter the world of embedded system, but if you do not want or you do not have time to learn Yocto there are other alternatives. There exists linux distributions online ready to be copied directly on the SD card. The most common are:

- Raspbian (based on Debian): http://www.raspbian.org/
- Fedora ARM: https://fedoraproject.org/wiki/Raspberry_Pi

But a more comprehensive list is available at the Raspberry Pi official website:

https://www.raspberrypi.org/downloads

In order to cross-compile DESERT you need a toolchain: you can download one from the network (https://github.com/raspberrypi/tools) or you can compile one by using crosstool-ng (http://crosstool-ng.org/): an alternative is to use the precompiled toolchain that could be already available in your OS repositories.

A good and complete tutorial on how to use the crosstool-ng for the Raspberry Pi can be found here: http://elinux.org/RPi_Linaro_GCC_Compilation.

<br>

\section udoo Udoo
<b> Udoo Quad</b>

See also: http://www.udoo.org/

\image html http://nautilus.dei.unipd.it/images/udoo-quad.jpg

UDOO is a mini PC that can be used both with Android and Linux OS, with an embedded Arduino-compatible board. It is a powerful prototyping board for software development and design; it is easy to use and enables project  development with minimum hardware knowledge.
UDOO merges different computing worlds together: each one has its proper strengths and weak points, but all of them are useful for educational purposes as well as Do-It-Yourself (DIY) and quick prototyping. UDOO is an open hardware, low-cost platform equipped with an ARM i.MX6 Freescale processor, and an Arduino Due compatible section based on ATMEL SAM3X8E ARM processor, all this available on the same board.

On the UDOO website, at the <A HREF="http://download.udoo.org/files/UDOO_Unico/UDOO_QDL_img/UDOObuntu_img/udoobuntu-udoo-qdl-desktop_2.1.2.zip">download</A> page, you can find images for several operative systems like: Ubuntu, Android and Debian. For our purposes, we tested DESERT with an UDOO quad, where we intalled the UDOObuntu 2.1.2 (Ubuntu 14.04 LTS).

- The procedure to follow to download and copy the image on the sd card is the following:
<small>

     wget http://download.udoo.org/files/UDOO_Unico/UDOO_QDL_img/UDOObuntu_img/udoobuntu-udoo-qdl-desktop_2.1.2.zip
     unzip udoo_quad_ubuntu1204_v2.1.zip
     sudo dd if=udoo_quad_ubuntu1204_v2.1.img of=/dev/sdX bs=1M

</small>

- After you have to download the toolchain and add it to your system:
<small>

    cd $HOME
    wget https://releases.linaro.org/15.05/components/toolchain/binaries/arm-linux-gnueabihf/gcc-linaro-4.9-2015.05-x86_64_arm-linux-gnueabihf.tar.xz
    gcc-linaro-4.9-2015.05-x86_64_arm-linux-gnueabihf.tar.xz
    sudo mkdir /opt/udoo
    sudo ln -s $HOME/gcc-linaro-4.9-2015.05-x86_64_arm-linux-gnueabihf/  /opt/udoo/arm-linux-gnueabihf-linaro

</small>

- Open the environment file with a text editor and write the following lines (remember to edit it as sudo):
<small>

    export PATH=/opt/udoo/arm-linux-gnueabihf-linaro/bin:$PATH
    export CC=arm-linux-gnueabihf-gcc
    export CXX=arm-linux-gnueabihf-g++
    export GDB=arm-linux-gnueabihf-gdb
    export STRIP=arm-linux-gnueabihf-strip
    export AR=arm-linux-gnueabihf-a

</small>

At this point it is possible to use the installation script. To do so, go inside <tt>.../DESERT_Underwater/DESERT_Framework/</tt> and launch <tt>./install.sh [OPTION]</tt>. See section \ref install for more information about the options.


\section pandaboard Pandaboard
<b> Pandaboard® </b>

See also: http://www.pandaboard.org/

\image html http://www.liquidware.com/system/0000/3727/PandaBoard_Angle.jpg

The Pandaboard is a powerful embedded board. It features a dual core Cortex A9 processor running at 1 GHz and a number of ports that outnmubers simpler boards such as the Raspberry or the Udoo. Namely, it comes with a HDMI output port, a DVI output port, 2 USB 2.0 ports, 1 micro USB OTG port, a serial port, a 10/100 Ethernet connector and also a WLAN/Bluetooth module. Of course these specs extend the range of applications it can support, and impact on the price of the board ($100-$200).

The horsepower of the Pandaboard makes it suitable for the installation of a complete OS like Ubuntu: on our Pandaboard we installed an Ubuntu image, cross-compiled for ARM. We point the user to the following link to easily obtain an Ubuntu image for the Pandaboard:

http://www.omappedia.org/wiki/Ubuntu_Pre-built_Binaries_Guide

Once the Pandaboard is set up and working properly (e.g., you can view terminal output or access the Pandaboard OS via ssh) you will have to cross-compile DESERT for the ARM A9 processor. We tested it on an Ubuntu 10.xx installation. To accomplish this, a few dependencies must be solved, namely:

- Open up a terminal and install the following packages:
<small>

     sudo apt-get install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross g++-arm-linux-gnueabihf

</small>
and then accept all the dependencies required.
At this point, we need to create a folder in order to hold the files needed by the toolchain:

- As sudo, do the following:
<small>

    sudo mkdir /opt/pandaboard
    cd /opt/pandaboard

</small>
- then create an environment file
<small>

     touch environment

</small>
- and finally write the following lines into the newly created environment file:
<small>

     export CC=arm-linux-gnueabihf-gcc
     export CXX=arm-linux-gnueabihf-g++
     export GDB=arm-linux-gnueabihf-gdb
     export STRIP=arm-linux-gnueabihf-strip
     export AR=arm-linux-gnueabihf-ar

</small>

At this point, the toolchain needed for cross-compilation is available, and you only need to call the DESERT installer as usual, where of course you need to specifically select the Pandaboard target.
<small>

     ./install.sh --wizard

</small>
See section \ref install for more information about the options.
*/

/** \page ack Acknowledgments

This software has been developed by the SIGNET Lab, Department of Information Engineering, University of Padova, Italy.

This work has been supported in part by the Italian Institute of Technology within the Project SEED framework (NAUTILUS project). The development of the SUN and UW-Polling protocols has been supported in part by the European Commission 7th framework programme (G.A. 258359 - CLAM project).

The SIGNET Lab gratefully thanks EvoLogics GmbH and the Woods Hole Oceanographic Institution for their precious help and technical support.

Grateful thanks also go to the many collaborations that helped develop part of the DESERT Underwater libraries, including the NATO Undersea Research Centre (NURC), the Scripps Institution of Oceanography, the Johns Hopkins University Applied Physics Laboratory the US Office of Naval Research and the US National Science Foundation.

*/

/**
* \page License License Terms
//
// Copyright (c) 2012-2017 Regents of the SIGNET lab, University of Padova.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:

* 1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

* 2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

* 3. Neither the name of the University of Padova (SIGNET lab) nor the
     names of its contributors may be used to endorse or promote products
     derived from this software without specific prior written permission.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
*/


/** \page Giovanni In memory of Giovanni Toso

DESERT Underwater has been put together, tested, improved, and expanded over time also thanks to the continuous efforts of our beloved colleague and friend Giovanni Toso, who prematurely passed away in a car accident on August 10, 2014. DESERT 3.0 is the first major release after Giovanni's death, and is dedicated to his memory.

\image html http://nautilus.dei.unipd.it/people/people_photos/GiovanniToso.jpg

*/
